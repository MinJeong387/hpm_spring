<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="himedia.hpm_spring.mappers.RestaurantReviewMapper">
	<resultMap id="rReviewResultMap" type="himedia.hpm_spring.repository.vo.RestaurantReviewVo">
    	<result property="id" column="id"/>
    	<result property="name" column="name"/>
    	<result property="nickname" column="nickname"/>
    	<result property="location" column="location"/>
    	<result property="mountainName" column="mountain_name"/>
    	<result property="rate" column="rate"/>
    	<result property="content" column="content"/>
    	<result property="updateDate" column="update_date"/>
    	<result property="usersId" column="users_id"/>
    	<result property="mountainsId" column="mountains_id"/>
    	<result property="commentCount" column="comment_count"/>
	</resultMap>

	<!-- 전체 맛집 리뷰 게시글 조회 + 댓글 수 -->
	<select id="retrieveAllReviews" resultMap="rReviewResultMap">
	SELECT r.*, 
		u.nickname,
		m.name AS mountain_name,
		(SELECT COUNT(*) FROM restaurant_comments rc WHERE rc.restaurants_id = r.id) AS comment_count 
	FROM restaurants r
	JOIN users u ON r.users_id = u.id
	JOIN mountains m ON r.mountains_id = m.id
	ORDER BY r.id DESC
	</select>
	
	<!-- 특정 맛집 리뷰 게시글 조회 -->
	<select id="retrieveReviewById" parameterType="Long" resultMap="rReviewResultMap">
	SELECT r.*, 
		u.nickname,
		m.name AS mountain_name,
		(SELECT COUNT(*) FROM restaurant_comments rc WHERE rc.restaurants_id = r.id) AS comment_count 
	FROM restaurants r
	JOIN users u ON r.users_id = u.id
	JOIN mountains m ON r.mountains_id = m.id
	WHERE r.id = #{id}
	</select>
	
	<!-- 사용자의 맛집 리뷰 게시글 조회 -->
	<select id="retrieveMyReviews" parameterType="Long" resultMap="rReviewResultMap">
	SELECT 
    r.*, 
    (SELECT COUNT(*) FROM restaurant_comments cc WHERE cc.restaurants_id = r.id) AS comment_count
  	FROM restaurants r
  	WHERE r.users_id = #{usersId}
  	ORDER BY r.update_date DESC
	</select>
	
	<!-- 맛집 리뷰 게시글 작성 -->
	<insert id="createReview" parameterType="rReviewVo" useGeneratedKeys="true" keyProperty="id">
    INSERT INTO restaurants (name, location, rate, content, update_date, users_id, mountains_id)
    VALUES (#{name}, #{location}, #{rate}, #{content}, #{updateDate}, #{usersId}, #{mountainsId})
	</insert>
	
	<!-- 맛집 리뷰 게시글 일부 수정 -->
	<update id="updateReview" parameterType="rReviewVo">
	UPDATE restaurants SET
		name=#{name}, 
		location=#{location}, 
		rate=#{rate}, 
		content=#{content}, 
		mountains_id = #{mountainsId}
	WHERE id=#{id}
	</update>

	<!-- 맛집 리뷰 게시글 삭제 -->
	<delete id="deleteReview" parameterType="Map">
	DELETE FROM restaurants 
	WHERE id=#{id} AND users_id = #{usersId}
	</delete>
	
</mapper>