<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="himedia.hpm_spring.mappers.MountainReviewCommentMapper">
	<resultMap id="mCommentResultMap" type="himedia.hpm_spring.repository.vo.MountainReviewCommentVo">
    	<result property="id" column="id"/>
    	<result property="nickname" column="nickname"/>
    	<result property="content" column="content"/>
    	<result property="updateDate" column="update_date"/>
    	<result property="reviewsId" column="reviews_id"/>
    	<result property="usersId" column="users_id"/>
    	<result property="parentId" column="parent_id"/>
	</resultMap>
	
	<!-- 전체 댓글 & 대댓글 조회 -->
	<select id="retrieveAllComments" parameterType="Long" resultMap="mCommentResultMap">
    SELECT review_comments.*, users.nickname
    FROM review_comments 
    JOIN users ON review_comments.users_id = users.id
    WHERE review_comments.reviews_id = #{mReviewId}
    ORDER BY review_comments.update_date ASC;
	</select>

	<!-- 특정 댓글 조회 -->
	<select id="retrieveCommentById" parameterType="Long" resultMap="mCommentResultMap">
    SELECT review_comments.*, users.nickname 
    FROM review_comments 
    JOIN users ON review_comments.users_id = users.id 
    WHERE review_comments.id=#{id}
	</select>
	
	<!-- 특정 댓글의 모든 대댓글 조회 -->
	<select id="findRepliesByCommentId" parameterType="Long" resultMap="mCommentResultMap">
    SELECT review_comments.*, users.nickname
    FROM review_comments 
    JOIN users ON review_comments.users_id = users.id
    WHERE review_comments.parent_id = #{id}
    ORDER BY review_comments.update_date ASC;
	</select>

	<!-- 특정 대댓글 조회 -->
	<select id="findReplyById" parameterType="Long" resultMap="mCommentResultMap">
    SELECT review_comments.*, users.nickname
    FROM review_comments 
    JOIN users ON review_comments.users_id = users.id
    WHERE review_comments.id = #{id} AND review_comments.parent_id IS NOT NULL
    LIMIT 1;
	</select>
	
	<!-- 사용자의 댓글 + 대댓글 조회 -->
	<select id="retrieveMyComments" parameterType="Long" resultMap="mCommentResultMap">
	SELECT m.*, m.title AS title
  	FROM mountain_comments mc
  	JOIN mountains m ON mc.mountains_id = m.id
  	WHERE mc.users_id = #{userId}
  	ORDER BY mc.update_date DESC
	</select>
	
    <!-- 댓글 생성 -->
    <insert id="createComment" parameterType="mCommentVo" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO review_comments (content, update_date, reviews_id, users_id, parent_id)
        VALUES (#{content}, #{updateDate}, #{reviewsId}, #{usersId}, #{parentId})
    </insert>

    <!-- 댓글 수정 -->
    <update id="updateComment" parameterType="mCommentVo">
        UPDATE review_comments SET content = #{content} WHERE id = #{id}
    </update>

    <!-- 댓글 삭제 -->
    <delete id="deleteComment" parameterType="Map">
    DELETE FROM review_comments 
    WHERE (id = #{id} AND users_id = #{usersId}) 
       OR (parent_id = #{id} AND users_id = #{usersId});
	</delete>
	
	<!-- reviewsId 기준 댓글 모두 삭제 -->
	<delete id="deleteCommentsByReviewsId" parameterType="Long">
    DELETE FROM review_comments WHERE reviews_id = #{reviewsId}
	</delete>

    <!-- 대댓글 추가 -->
    <insert id="createReply" parameterType="mCommentVo" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO review_comments (content, update_date, reviews_id, users_id, parent_id)
        VALUES (#{content}, #{updateDate}, #{reviewsId}, #{usersId}, #{parentId})
    </insert>

    <!-- 대댓글 수정 -->
    <update id="updateReply" parameterType="mCommentVo">
        UPDATE review_comments 
        SET content = #{content} 
        WHERE id = #{id} AND parent_id IS NOT NULL
    </update>

    <!-- 대댓글 삭제 -->
    <delete id="deleteReply" parameterType="Map">
        DELETE FROM review_comments 
        WHERE id = #{id} AND parent_id IS NOT NULL AND users_id = #{usersId}
    </delete>
</mapper>