<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="himedia.hpm_spring.mappers.MountainReviewMapper">
	<resultMap id="mReviewResultMap" type="himedia.hpm_spring.repository.vo.MountainReviewVo">
    	<result property="id" column="id"/>
    	<result property="name" column="name"/>
    	<result property="nickname" column="nickname"/>
    	<result property="location" column="location"/>
    	<result property="courseName" column="course_name"/>
    	<result property="difficultyLevel" column="difficulty_level"/>
    	<result property="content" column="content"/>
    	<result property="updateDate" column="update_date"/>
    	<result property="usersId" column="users_id"/>
    	<result property="mountainsId" column="mountains_id"/>
    	<result property="mountainCoursesId" column="mountain_courses_id"/>
    	<result property="commentCount" column="comment_count"/>
	</resultMap>

	<!-- 전체 게시글 조회 + 댓글 수 -->
	<select id="retrieveAllReviews" resultMap="mReviewResultMap">
	SELECT r.*, 
		u.nickname, 
		m.name AS name, 
		m.location,
		mc.course_name, 
		mc.difficulty_level,
		(SELECT COUNT(*) FROM review_comments rc WHERE rc.reviews_id = r.id) AS comment_count
	FROM reviews r
	JOIN users u ON r.users_id = u.id
	JOIN mountains m ON r.mountains_id = m.id
	JOIN mountain_courses mc ON r.mountain_courses_id = mc.id
	ORDER BY r.id DESC
	</select>
	
	<!-- 특정 리뷰 게시글 조회 -->
	<select id="retrieveReviewById" parameterType="Long" resultMap="mReviewResultMap">
	SELECT r.*, 
		u.nickname, 
		m.name AS name, 
		m.location,
		mc.course_name, 
		mc.difficulty_level,
			(SELECT COUNT(*) FROM review_comments rc WHERE rc.reviews_id = r.id) AS comment_count
	FROM reviews r
	JOIN users u ON r.users_id = u.id
	JOIN mountains m ON r.mountains_id = m.id
	JOIN mountain_courses mc ON r.mountain_courses_id = mc.id
	WHERE r.id = #{id}
	</select>
	
	<!-- 사용자의 리뷰 게시글 조회 -->
	<select id="retrieveMyReviews" parameterType="Long" resultMap="mReviewResultMap">
	SELECT 
    c.*, 
    (SELECT COUNT(*) FROM mountain_comments cc WHERE cc.mountains_id = c.id) AS comment_count
  	FROM mountains c
  	WHERE c.users_id = #{usersId}
  	ORDER BY c.update_date DESC
	</select>
	
	<!-- 리뷰 게시글 작성 -->
	<insert id="createReview" parameterType="mReviewVo" useGeneratedKeys="true" keyProperty="id">
    INSERT INTO reviews (content, update_date, users_id, mountains_id, mountain_courses_id)
	VALUES (#{content}, #{updateDate}, #{usersId}, #{mountainsId}, #{mountainCoursesId})
	</insert>
	
	<!-- 리뷰 게시글 일부 수정 -->
	<update id="updateReview" parameterType="mReviewVo">
	UPDATE reviews SET
		mountains_id = #{mountainsId},  <!-- 산을 다시 선택할 수 있게! -->
		mountain_courses_id = #{mountainCoursesId}, <!-- 코스도 다시 선택 가능 -->
		content = #{content}
	WHERE id = #{id}
	</update>

	<!-- 리뷰 게시글 삭제 -->
	<delete id="deleteReview" parameterType="Map">
	DELETE FROM reviews 
	WHERE id=#{id} AND users_id = #{usersId}
	</delete>
	
</mapper>