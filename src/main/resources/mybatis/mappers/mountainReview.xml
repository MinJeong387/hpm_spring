<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="himedia.hpm_spring.mappers.MountainReviewMapper">
	<resultMap id="mReviewResultMap" type="himedia.hpm_spring.repository.vo.MountainReviewVo">
    	<result property="id" column="id"/>
    	<result property="name" column="name"/>
    	<result property="nickname" column="nickname"/>
    	<result property="location" column="location"/>
    	<result property="courseName" column="course_name"/>
    	<result property="difficultyLevel" column="difficulty_level"/>
   	 	<result property="title" column="title"/>
    	<result property="content" column="content"/>
    	<result property="updateDate" column="update_date"/>
    	<result property="usersId" column="users_id"/>
    	<result property="mountainsId" column="mountains_id"/>
    	<result property="mountainCoursesId" column="mountain_courses_id"/>
    	<result property="views" column="views"/>
	</resultMap>

	<!-- 전체 리뷰 게시글 조회 -->
	<select id="retrieveAllReviews" resultMap="mReviewResultMap">
	SELECT reviews.*, users.nickname FROM reviews JOIN users 
	WHERE reviews.users_id = users.id 
	ORDER BY reviews.id DESC
	</select>
	
	<!-- 특정 리뷰 게시글 조회 -->
	<select id="retrieveReviewById" parameterType="Long" resultMap="mReviewResultMap">
	SELECT reviews.*, users.nickname FROM reviews JOIN users 
	WHERE reviews.id=#{id} AND reviews.users_id = users.id
	</select>
	
	<!-- 사용자의 리뷰 게시글 조회 -->
	<select id="retrieveMyReviews" parameterType="Long" resultMap="mReviewResultMap">
	SELECT 
    c.*, 
    (SELECT COUNT(*) FROM mountain_comments cc WHERE cc.mountains_id = c.id) AS comment_count
  	FROM mountains c
  	WHERE c.users_id = #{usersId}
  	ORDER BY c.update_date DESC
	</select>
	
	<!-- 키워드 기반 게시글 조회 -->
	<select id="retrieveReviewsByKeyword" parameterType="String" resultMap="mReviewResultMap">
	SELECT 
  	c.*, 
  	u.nickname,
  	(SELECT COUNT(*) FROM review_comments cc WHERE cc.reviews_id = c.id) AS review_count,
  	(SELECT cp.file_path FROM review_photos cp WHERE cp.reviews_id = c.id ORDER BY cp.id ASC LIMIT 1) AS imageUrl,
  	c.views AS views
	FROM reviews c
	JOIN users u ON c.users_id = u.id
	WHERE c.title REGEXP #{pattern}
    OR c.content REGEXP #{pattern}
	ORDER BY c.id DESC
	</select>
	
	<!-- 리뷰 게시글 작성 -->
	<insert id="createReview" parameterType="mReviewVo">
    INSERT INTO reviews (name, nickname, location, course_name, difficulty_level, title, content, update_date, users_id, mountains_id, mountain_courses_id)
    VALUES (#{name}, #{nickname}, #{location}, #{courseName}, #{difficultyLevel}, #{title}, #{content}, #{updateDate}, #{usersId}, #{mountainsId}, #{mountainCoursesId})
	</insert>
	
	<!-- 리뷰 게시글 일부 수정 -->
	<update id="updateReview" parameterType="mReviewVo">
	UPDATE reviews SET
	name=#{name}, location=#{location}, course_name=#{courseName}, difficulty_level=#{difficultyLevel}, title=#{title}, content=#{content}
	WHERE id=#{id}
	</update>

	<!-- 리뷰 게시글 삭제 -->
	<delete id="deleteReview" parameterType="Map">
	DELETE FROM reviews 
	WHERE id=#{id} AND users_id = #{usersId}
	</delete>
	
	<!-- 조회수 증가 -->
    <update id="incrementViews" parameterType="Long">
    UPDATE communities
    SET views = views + 1
    WHERE id = #{id}
    </update>
</mapper>